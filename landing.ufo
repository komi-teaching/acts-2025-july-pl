(define id (lambda (x) x))
(define inc (lambda (k) (+ k 1)))
(define dec (lambda (k) (- k 1)))
(define square (lambda (k) (* k k)))
(define sqdiff (lambda (k l) (square (- k l))))
(define not (lambda (k) (- 1 k)))
(define or (lambda (k l) (* k l)))
(define norm (lambda (k) (not (/ 1 (inc k)))))
(define = (lambda (k l) (norm (sqdiff k l))))
(define nil-obj (lambda () (0)))
(define repeat ((lambda (@F) ((lambda (@X) (lambda (n f x) (@F (@X @X) n f x))) (lambda (@X) (lambda (n f x) (@F (@X @X) n f x))))) (lambda (rec n f x) ((if (= n 0) (lambda () x) (lambda () (rec (dec n) f (f x))))))))
(define pair (lambda (a b) (lambda (f) (f a b))))
(define fst (lambda (p) (p (lambda (x y) x))))
(define snd (lambda (p) (p (lambda (x y) y))))
(define cons (lambda (a b) (lambda (e f) (f a (b e f)))))
(define nil (lambda (e f) e))
(define head (lambda (xs) (xs nil (lambda (y ys) y))))
(define tail (lambda (xs) (snd (xs (pair nil nil) (lambda (y p) (pair (cons y (fst p)) (fst p)))))))
(define is-nil (lambda (xs) (xs 0 (lambda (y ys) 1))))
(define index ((lambda (@F) ((lambda (@X) (lambda (n xs def) (@F (@X @X) n xs def))) (lambda (@X) (lambda (n xs def) (@F (@X @X) n xs def))))) (lambda (rec n xs def) ((if (is-nil xs) (lambda () (def n)) (if (= n 0) (lambda () (head xs)) (lambda () (rec (dec n) (tail xs) def))))))))
(define main ((lambda (impls) ((lambda (step) (snd (snd (step (pair 0 nil-obj))))) ((lambda (@F) ((lambda (@X) (lambda (st) (@F (@X @X) st))) (lambda (@X) (lambda (st) (@F (@X @X) st))))) (lambda (rec st) ((lambda (opcode) ((lambda (op) (op rec st)) (index opcode impls (lambda (n) (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (pair tree n)))))))))) (Q (fst st))))))) (cons (lambda (f st) st) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (snd tree) (fst tree)))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (fst tree)))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (snd tree)))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (pair (fst tree) (repeat (snd tree) fst (fst tree)))))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (pair (fst tree) (fst (snd tree)))))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (pair (fst tree) (snd (snd tree)))))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (pair (fst (fst tree)) (pair (snd (fst tree)) (snd tree)))))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (pair (pair (fst tree) (fst (snd tree))) (snd (snd tree)))))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (pair (fst (fst (fst tree))) (if (snd tree) (snd (fst tree)) (snd (fst (fst tree)))))))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (pair (fst (fst tree)) (+ (snd tree) (snd (fst tree))))))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (pair (fst (fst tree)) (- (snd tree) (snd (fst tree))))))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (pair (fst (fst tree)) (* (snd tree) (snd (fst tree))))))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (pair (fst (fst tree)) (/ (snd tree) (snd (fst tree))))))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (print (snd tree) (fst tree))))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (pair (fst tree) (Q (snd tree)))))))) (cons (lambda (f st) (f (st (lambda (ip tree) (pair (inc ip) (pair tree nil-obj)))))) nil)))))))))))))))))))
